declaration:
  call: declare
  version: 0.2
  name: "MOCK - Electricity Price Service"
  description: |
    This is a mock service that fetches Nordpool electricity prices for a specified date range.
  method: get
  params:
    startDate: string  # yyyy-mm-dd format (start of the period)
    endDate: string    # yyyy-mm-dd format (end of the period)
  returns: json

# Prepare Dates based on startDate and endDate
getDates:
  assign:
    startDate: ${incoming.params.startDate || new Date().toISOString().split('T')[0]}  # yyyy-mm-dd
    endDate: ${incoming.params.endDate || new Date().toISOString().split('T')[0]} # default to today
  next: formatDates

# make dates conform to API standard
formatDates:
  assign: # dates format to yyyy-mm-ddTHH:MM:SS.000Z
    startDateTime: ${new Date(new Date(startDate).getTime() - 24 * 60 * 60 * 1000).toISOString().split('T')[0] + "T21:00:00.000Z"} # start date is - 24h at 9pm to match API standard
    endDateTime: ${endDate + "T20:59:59.000Z"}
  next: dateCheck

dateCheck:
  switch:  # to check if end date is before start date
    - condition: ${new Date(endDateTime) < new Date(startDateTime)}
      next: startDateError
  next: logStep

# to check date format and value
logStep: # eg. LOG: Start date: 2024-10-09T21:00:00.000Z, End date: 2024-10-14T20:59:59.000Z
  log: "Start date: ${startDateTime}, End date: ${endDateTime}"
  next: getPriceForPeriod

getPriceForPeriod:
  call: reflect.mock
  args:
    reqquest:
      url: www.exampleElectricityAPI.ee # https://dashboard.elering.ee/api/nps/price
      query:
        start: ${startDateTime}
        end: ${endDateTime} # dates format to yyyy-mm-ddTHH:MM:SS.000Z
    response:
        data:
          ee: # mock data. e.g. 2024-10-10 - 2024-10-10
            - timestamp: 1728507600
              price: 6.9500
            - timestamp: 1728511200
              price: 58.6900
            - timestamp: 1728514800
              price: 45.6700
            - timestamp: 1728518400
              price: 24.9100
            - timestamp: 1728522000
              price: 12.8900
            - timestamp: 1728525600
              price: 14.2400
            - timestamp: 1728529200
              price: 38.8700
            - timestamp: 1728532800
              price: 61.6000
            - timestamp: 1728536400
              price: 86.7100
            - timestamp: 1728540000
              price: 80.4600
            - timestamp: 1728543600
              price: 67.5000
            - timestamp: 1728547200
              price: 24.9800
            - timestamp: 1728550800
              price: 24.7400
            - timestamp: 1728554400
              price: 21.8300
            - timestamp: 1728558000
              price: 15.9400
            - timestamp: 1728561600
              price: 19.7800
            - timestamp: 1728565200
              price: 20.1100
            - timestamp: 1728568800
              price: 17.9100
            - timestamp: 1728572400
              price: 70.0200
            - timestamp: 1728576000
              price: 70.0600
            - timestamp: 1728579600
              price: 27.0300
            - timestamp: 1728583200
              price: 6.1600
            - timestamp: 1728586800
              price: 3.3200
            - timestamp: 1728590400
              price: 0.0000
    
  result: eleringPrices
  next: assignResult

assignResult:
  assign:
    periodPrices: ${eleringPrices.response.body.data.ee}
    responseLength: ${(eleringPrices.response.body.data.ee).length}
  next: logResult

logResult: # to monitor response size
  log: "RESPONSE LENGTH: ${responseLength}"
  next: returnResult

returnResult:
  return: ${periodPrices}
  next: end

# --- --- --- --- --- --- --- ---
startDateError:
  return: "Error: start date cannot be later than end date"
  next: end

dateRangeError:
  return: "Error: interval cannot be longer than 1 year"
  next: end